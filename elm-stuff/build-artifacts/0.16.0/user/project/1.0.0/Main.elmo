Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var complement = function (dna) {
      return A2($String.join,
      "",
      A2($List.map,
      function (a) {
         return $String.fromChar(a);
      },
      A2($List.map,
      function (letter) {
         return _U.eq(letter,_U.chr("C")) ? _U.chr("G") : _U.eq(letter,_U.chr("G")) ? _U.chr("C") : _U.eq(letter,_U.chr("T")) ? _U.chr("A") : _U.eq(letter,
         _U.chr("A")) ? _U.chr("U") : _U.chr("!");
      },
      $String.toList($String.toUpper(dna)))));
   };
   var myStyle = $Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "width",_1: "100%"}
                                                ,{ctor: "_Tuple2",_0: "height",_1: "40px"}
                                                ,{ctor: "_Tuple2",_0: "padding",_1: "5px 0"}
                                                ,{ctor: "_Tuple2",_0: "font-size",_1: "1em"}
                                                ,{ctor: "_Tuple2",_0: "text-align",_1: "center"}]));
   var view = F2(function (address,string) {
      var validationMessage = A2($Regex.contains,$Regex.regex("^[cgatCGAT]+$"),string) ? A2($Html.span,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "color",_1: "green"}]))]),
      _U.list([$Html.text("This is a valid DNA string.")])) : A2($Html.span,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "color",_1: "red"}]))]),
      _U.list([$Html.text("Please enter a valid DNA string.")]));
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.input,
              _U.list([$Html$Attributes.placeholder("Enter RNA here")
                      ,$Html$Attributes.value(string)
                      ,A3($Html$Events.on,"input",$Html$Events.targetValue,$Signal.message(address))
                      ,myStyle]),
              _U.list([]))
              ,A2($Html.div,_U.list([myStyle]),_U.list([$Html.text(A2($Basics._op["++"],"The RNA complement is ",complement(string)))]))
              ,A2($Html.div,_U.list([myStyle]),_U.list([validationMessage]))]));
   });
   var update = F2(function (newStr,oldStr) {    return newStr;});
   var RNA = function (a) {    return {ctor: "RNA",_0: a};};
   var main = $StartApp$Simple.start({model: "",view: view,update: update});
   return _elm.Main.values = {_op: _op,main: main,RNA: RNA,update: update,view: view,myStyle: myStyle,complement: complement};
};